
lab1_unit7_lesson1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  4 .ARM          00000000  08000354  08000354  0001035c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000354  0800035c  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800035c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800035c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000146  00000000  00000000  00010385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000c2  00000000  00000000  000104cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000110  00000000  00000000  0001058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  000106a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001dab  00000000  00000000  00010748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000006cc  00000000  00000000  000124f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00007dc1  00000000  00000000  00012bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001a980  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0001a9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800033c 	.word	0x0800033c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800033c 	.word	0x0800033c

08000170 <clock_init>:
#define	GPIOB_CRL		*(volatile uint32_t*)(GPIOB_BASE+0x00)
#define	GPIOB_ODR		*(volatile uint32_t*)(GPIOB_BASE+0x0C)
#define	GPIOB_IDR		*(volatile uint32_t*)(GPIOB_BASE+0x08)

void clock_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//enable clock gpioA
	RCC_APB2ENR |= RCC_IOPAEN;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]
	//enable clock gpioB
	RCC_APB2ENR |= (1<<3);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIO_init>:

void GPIO_init()
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0
	GPIOA_CRL = 0x0;
 800019c:	4b16      	ldr	r3, [pc, #88]	; (80001f8 <GPIO_init+0x60>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	//GPIOA_CRH = 0;
	//GPIOA_ODR = 0;


	//PA1 input HighZ
	GPIOA_CRL |= 1<<6;
 80001a2:	4b15      	ldr	r3, [pc, #84]	; (80001f8 <GPIO_init+0x60>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4a14      	ldr	r2, [pc, #80]	; (80001f8 <GPIO_init+0x60>)
 80001a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ac:	6013      	str	r3, [r2, #0]
	//GPIOA_CRL &= ~(0b11 << 4);
	//PB1 output push pull mode
	//01: output mode, max speed 10MHz
	GPIOB_CRL = 0x0;
 80001ae:	4b13      	ldr	r3, [pc, #76]	; (80001fc <GPIO_init+0x64>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
	//GPIOB_CRL &= ~(0b11<<6);
	GPIOB_CRL |= (0b01<<4);
 80001b4:	4b11      	ldr	r3, [pc, #68]	; (80001fc <GPIO_init+0x64>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	4a10      	ldr	r2, [pc, #64]	; (80001fc <GPIO_init+0x64>)
 80001ba:	f043 0310 	orr.w	r3, r3, #16
 80001be:	6013      	str	r3, [r2, #0]
	//CNF 00:general purpose output push pull


	//PA13 input HighZ
	GPIOA_CRH = 0;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <GPIO_init+0x68>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
	//GPIOA_CRH &= ~(0b11<<20);
	//GPIOA_CRH |= (0b01<<22);
	GPIOA_CRH  |= 1<<22;
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <GPIO_init+0x68>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	4a0d      	ldr	r2, [pc, #52]	; (8000200 <GPIO_init+0x68>)
 80001cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001d0:	6013      	str	r3, [r2, #0]
	GPIOB_CRH  =0;
 80001d2:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <GPIO_init+0x6c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
	//PB13 output push pull mode
	GPIOB_CRH |= 1<<20;
 80001d8:	4b0a      	ldr	r3, [pc, #40]	; (8000204 <GPIO_init+0x6c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a09      	ldr	r2, [pc, #36]	; (8000204 <GPIO_init+0x6c>)
 80001de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |= 1<<22;
 80001e4:	4b07      	ldr	r3, [pc, #28]	; (8000204 <GPIO_init+0x6c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a06      	ldr	r2, [pc, #24]	; (8000204 <GPIO_init+0x6c>)
 80001ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001ee:	6013      	str	r3, [r2, #0]


}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40010800 	.word	0x40010800
 80001fc:	40010c00 	.word	0x40010c00
 8000200:	40010804 	.word	0x40010804
 8000204:	40010c04 	.word	0x40010c04

08000208 <wait_ms>:
void wait_ms(int x){
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=0;i<x;i++)
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	e00b      	b.n	800022e <wait_ms+0x26>
		for(j=0;j<255;j++);
 8000216:	2300      	movs	r3, #0
 8000218:	60bb      	str	r3, [r7, #8]
 800021a:	e002      	b.n	8000222 <wait_ms+0x1a>
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	3301      	adds	r3, #1
 8000220:	60bb      	str	r3, [r7, #8]
 8000222:	68bb      	ldr	r3, [r7, #8]
 8000224:	2bfe      	cmp	r3, #254	; 0xfe
 8000226:	ddf9      	ble.n	800021c <wait_ms+0x14>
	for(i=0;i<x;i++)
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	3301      	adds	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	429a      	cmp	r2, r3
 8000234:	dbef      	blt.n	8000216 <wait_ms+0xe>
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
	...

08000244 <main>:
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	clock_init();
 8000248:	f7ff ff92 	bl	8000170 <clock_init>
	GPIO_init();
 800024c:	f7ff ffa4 	bl	8000198 <GPIO_init>

	while(1)
	{
		//PA1 >> connected with external Pull UP resistance
		if( ((GPIOA_IDR &(1<<1))>>1) ==0 )//single press
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <main+0x54>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b00      	cmp	r3, #0
 800025a:	d10c      	bne.n	8000276 <main+0x32>
		{
			GPIOB_ODR ^= 1<<1;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <main+0x58>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a0e      	ldr	r2, [pc, #56]	; (800029c <main+0x58>)
 8000262:	f083 0302 	eor.w	r3, r3, #2
 8000266:	6013      	str	r3, [r2, #0]
			while( (((GPIOA_IDR &(1<<1))>>1) ==0) );
 8000268:	bf00      	nop
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <main+0x54>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <main+0x26>
		}
		//PA13 >> connected with external Pull DOWN resistance
		if( ((GPIOA_IDR &(1<<13))>>13) == 1 )//Multi press
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <main+0x54>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	0b5b      	lsrs	r3, r3, #13
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b01      	cmp	r3, #1
 8000282:	d105      	bne.n	8000290 <main+0x4c>
		{
			GPIOB_ODR ^= 1<<13;
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <main+0x58>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <main+0x58>)
 800028a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800028e:	6013      	str	r3, [r2, #0]
		}
		wait_ms(1);
 8000290:	2001      	movs	r0, #1
 8000292:	f7ff ffb9 	bl	8000208 <wait_ms>
		if( ((GPIOA_IDR &(1<<1))>>1) ==0 )//single press
 8000296:	e7db      	b.n	8000250 <main+0xc>
 8000298:	40010808 	.word	0x40010808
 800029c:	40010c0c 	.word	0x40010c0c

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ffb7 	bl	8000244 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	0800035c 	.word	0x0800035c
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	2600      	movs	r6, #0
 80002f8:	4d0c      	ldr	r5, [pc, #48]	; (800032c <__libc_init_array+0x38>)
 80002fa:	4c0d      	ldr	r4, [pc, #52]	; (8000330 <__libc_init_array+0x3c>)
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	f000 f81a 	bl	800033c <_init>
 8000308:	2600      	movs	r6, #0
 800030a:	4d0a      	ldr	r5, [pc, #40]	; (8000334 <__libc_init_array+0x40>)
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <__libc_init_array+0x44>)
 800030e:	1b64      	subs	r4, r4, r5
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000354 	.word	0x08000354
 8000330:	08000354 	.word	0x08000354
 8000334:	08000354 	.word	0x08000354
 8000338:	08000358 	.word	0x08000358

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
