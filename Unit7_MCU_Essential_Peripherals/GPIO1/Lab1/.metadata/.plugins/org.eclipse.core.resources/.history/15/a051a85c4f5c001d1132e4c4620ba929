/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//register address

//RCC
#define RCC_BASE		0x40021000
#define	RCC_APB2ENR		*(volatile uint32_t*)(RCC_BASE+0x18)
#define RCC_IOPAEN		(1<<2)

//GPIO
#define GPIOA_BASE		0x40010800
#define	GPIOA_CRH		*(volatile uint32_t*)(GPIOA_BASE+0x04)
#define	GPIOA_CRL		*(volatile uint32_t*)(GPIOA_BASE+0x00)

#define	GPIOA_ODR		*(volatile uint32_t*)(GPIOA_BASE+0x0C)
#define GPIOA13			(1UL<<13)


//EXTI
#define EXTI_BASE		0x40010400
#define	EXTI_IMR		*(volatile uint32_t*)(EXTI_BASE+0x00)
#define	EXTI_RISR		*(volatile uint32_t*)(EXTI_BASE+0x08)
#define	EXTI_PR			*(volatile uint32_t*)(EXTI_BASE+0x14)

//AFIO
#define AFIO_BASE		0x40010000
#define	AFIO_EXTICR1	*(volatile uint32_t*)(AFIO_BASE+0x08)

#define	NVIC_EXTIE0		*(volatile uint32_t*)(0xE000E100)

void clock_init()
{
	//enable clock gpioA
	RCC_APB2ENR |= RCC_IOPAEN;
	//Bit 0 AFIOEN: Alternate function I/) clock enable
	RCC_APB2ENR |= (1<<0);
}

void GPIO_init()
{
	//pin13 portA output
	GPIOA_CRH	&= 0xFF0FFFFF;
	GPIOA_CRH	|= 0x00200000;

	//pinA0 input floating
	GPIOA_CRL |= (1<<2);
}

int main(void)
{
	clock_init();
	GPIO_init();

	//EXTI0 configuration to portA0
	AFIO_EXTICR1 =0;

	//enable rising trigger
	EXTI_RISR |= (1<<0);

	//enable EXTI Line 0 (mask 1)
	EXTI_IMR |= (1<<0);

	//enable NVIC irq6 >> EXTI0
	NVIC_EXTIE0 |= (1<<6);
	while(1);
}
void EXTI0_IRQHandler(void)
{
	//IRQ happened EXTI0 >> PORTA pin 0 - rising egde
	GPIOA_ODR ^=(1<<13);
	//clear pending request for line 0
	EXTI_PR |= (1<<0);
}
