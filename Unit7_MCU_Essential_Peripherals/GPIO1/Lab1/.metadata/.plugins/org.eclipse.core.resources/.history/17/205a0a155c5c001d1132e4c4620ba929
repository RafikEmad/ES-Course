/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//register address

//RCC
#define RCC_BASE		0x40021000
#define	RCC_APB2ENR		*(volatile uint32_t*)(RCC_BASE+0x18)
#define RCC_IOPAEN		(1<<2)

//GPIO
#define GPIOA_BASE		0x40010800
#define	GPIOA_CRH		*(volatile uint32_t*)(GPIOA_BASE+0x04)
#define	GPIOA_CRL		*(volatile uint32_t*)(GPIOA_BASE+0x00)
#define	GPIOA_ODR		*(volatile uint32_t*)(GPIOA_BASE+0x0C)
#define	GPIOA_IDR		*(volatile uint32_t*)(GPIOA_BASE+0x08)

#define GPIOA13			(1UL<<13)

#define GPIOB_BASE		0x40010C00
#define	GPIOB_CRH		*(volatile uint32_t*)(GPIOB_BASE+0x04)
#define	GPIOB_CRL		*(volatile uint32_t*)(GPIOB_BASE+0x00)
#define	GPIOB_ODR		*(volatile uint32_t*)(GPIOB_BASE+0x0C)
#define	GPIOB_IDR		*(volatile uint32_t*)(GPIOB_BASE+0x08)

void clock_init()
{
	//enable clock gpioA
	RCC_APB2ENR |= RCC_IOPAEN;
	//enable clock gpioB
	RCC_APB2ENR |= (1<<3);
}

void GPIO_init()
{
	GPIOA_CRL = 0x0;
	GPIOB_CRL = 0x0;
	GPIOA_CRH = 0;
	GPIOA_ODR = 0;


	//PA1 input HighZ
	GPIOA_CRL |= 1<<6;
	GPIOA_CRL &= ~(0b11 << 4);
	//PB1 output push pull mode
	//01: output mode, max speed 10MHz
	GPIOB_CRL &= ~(0b11<<6);
	GPIOB_CRL |= (0b01<<4);
	//CNF 00:general purpose output push pull


	//PA13 input HighZ
	GPIOA_CRH &= ~(0b11<<20);
	GPIOA_CRH |= (0b01<<22);
	//PB13 output push pull mode
	GPIOB_CRH |= (0b01<<20);
	GPIOB_CRH &= ~(0b11<<22);


}
void my_wait(int x)
{
	unsigned int i ,j;
	for (i=0;i<x;i++)
		for (j=0;j<255000;j++);
}
int main(void)
{
	clock_init();
	GPIO_init();

	while(1)
	{
		//PA1 >> connected with external Pull UP resistance
		if( ((GPIOA_IDR &(1<<1))>>1) ==0 )//single press
		{
			GPIOB_ODR ^= 1<<1;
			while( ((GPIOA_IDR &(1<<1))>>1) ==0 );
		}
		//PA13 >> connected with external Pull DOWN resistance
		if( ((GPIOA_IDR &(1<<13))>>13) == 1 )//Multi press
		{
			GPIOB_ODR ^= (1<<13);
		}
		my_wait(1);
	}
}
