/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#include "stm32f30x6.h"
#include "stm32_F103C6_gpio_driver.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void clock_init()
{
	//enable clock gpioA
	RCC_GPIOA_CLK_EN();
	//enable clock gpioB
	RCC_GPIOB_CLK_EN();
}

void GPIO_init()
{
	GPIO_PinConfig_t PinCfg;

	//PA1 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCfg);


	//PA1 input HighZ
	GPIOA_CRL |= 1<<6;
	//GPIOA_CRL &= ~(0b11 << 4);
	//PB1 output push pull mode
	//01: output mode, max speed 10MHz
	GPIOB_CRL = 0x0;
	//GPIOB_CRL &= ~(0b11<<6);
	GPIOB_CRL |= (0b01<<4);
	//CNF 00:general purpose output push pull


	//PA13 input HighZ
	GPIOA_CRH = 0;
	//GPIOA_CRH &= ~(0b11<<20);
	//GPIOA_CRH |= (0b01<<22);
	GPIOA_CRH  |= 1<<22;
	GPIOB_CRH  =0;
	//PB13 output push pull mode
	GPIOB_CRH |= 1<<20;
	GPIOB_CRH |= 1<<22;


}
void wait_ms(int x){
	int i,j;
	for(i=0;i<x;i++)
		for(j=0;j<255;j++);
}
int main(void)
{
	clock_init();
	GPIO_init();

	while(1)
	{
		//PA1 >> connected with external Pull UP resistance
		if( ((GPIOA_IDR &(1<<1))>>1) ==0 )//single press
		{
			GPIOB_ODR ^= 1<<1;
			while( (((GPIOA_IDR &(1<<1))>>1) ==0) );
		}
		//PA13 >> connected with external Pull DOWN resistance
		if( ((GPIOA_IDR &(1<<13))>>13) == 1 )//Multi press
		{
			GPIOB_ODR ^= 1<<13;
		}
		wait_ms(1);
	}

}
