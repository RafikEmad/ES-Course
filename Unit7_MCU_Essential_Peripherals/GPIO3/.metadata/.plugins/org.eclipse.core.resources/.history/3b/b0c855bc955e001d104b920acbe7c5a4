/*
 * stm32_F103C6_EXTI_driver.c
 *
 *  Created on: Nov 6, 2022
 *      Author: rafik
 */
#include "stm32_F103C6_EXTI_driver.h"

/*
 * =================================================
 * 				Generic Variables
 * =================================================
 */
void (*GP_IRQ_CallBack[15])(void);

/*
 * =================================================
 * 				Generic Macros
 * =================================================
 */
#define AFIO_GPIO_EXTI_Mapping(x)		((x==GPIOA)?0:\
										(x==GPIOB)?1:\
										(x==GPIOC)?2:\
										(x==GPIOD)?3:0)
/*
 * =================================================
 * 			Generic Functions
 * =================================================
 */
void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
	//1- configure GPIO to be AF Input -> Floating Input
	GPIO_PinConfig_t PinCfg;
	//update the gpio pin to be floating input
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
	//=======================================

	//2- UPDATE AFIO to route between EXTI Line with PORT A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4;
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4)*4;

	//clear the four bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF <<AFIO_EXTICR_Position);

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port)&0xF)<<AFIO_EXTICR_Position);

	//3- Update rising or falling edge
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	if(EXTI_Config->Trigger_case == EXTI_Trigger_RISING)
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
	else if (EXTI_Config->Trigger_case == EXTI_Trigger_Falling)
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
	else if (EXTI_Config->Trigger_case == EXTI_Trigger_RISINGandFalling)
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}


	//=======================================
	//4- Update IRQ Handling Callback
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
	//=======================================
	//5- Enable/Disable IRQ

}



/**=================================
 * @Fn			-MCAL_EXTI_GPIO_DeInit
 * @brief		-reset EXTI Registers and NVIC Corresponding IRQ Mask
 * @retval		-none
 * Note
 */
void MCAL_EXTI_GPIO_DeInit(void)
{
	EXTI->IMR = 0x00000000;
	EXTI->EMR = 0x00000000;

	EXTI->RTSR = 0x00000000;
	EXTI->FTSR = 0x00000000;
	EXTI->SWIER = 0x00000000;
	//rc_w1 cleared by writing a '1'into the PR
	EXTI->PR = 0xFFFFFFFF;

	//Disable the EXTI IRQ From NVIC
	NVIC_IRQ6_EXTI0_Disable;
	NVIC_IRQ7_EXTI1_Disable;
	NVIC_IRQ8_EXTI2_Disable;
	NVIC_IRQ9_EXTI3_Disable;
	NVIC_IRQ10_EXTI4_Disable;
	NVIC_IRQ23_EXTI5_9_Disable;
	NVIC_IRQ40_EXTI10_15_Enable;
}
/**=================================
 * @Fn			-MCAL_EXTI_GPIO_Init
 * @brief		-this is used to initialize EXTI from specific GPIO PIN and specify the Mask/Trigger condition and IRQ Callback
 * @param [in]	-EXTI_Config set by @ref EXTI_define, EXTI_Trigger_define and EXTI_IRQ_define
 * @retval		-none
 * Note
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}

/**=================================
 * @Fn			-MCAL_EXTI_GPIO_Update
 * @brief		-this is used to initialize EXTI from specific GPIO PIN and specify the Mask/Trigger condition and IRQ Callback
 * @param [in]	-EXTI_Config set by @ref EXTI_define, EXTI_Trigger_define and EXTI_IRQ_define
 * @retval		-none
 * Note
 */



void MCAL_EXTI_GPIO_Update(EXTI_PinConfig_t* EXTI_Config)
{
	Update_EXTI(EXTI_Config);
}


/*
 * =================================================
 * 				ISR Functions
 * =================================================
 */
void EXTI0_IRQHandler (void)
{
	//cleared by writing a '1' into the bit pending register (EXTI_PR)
	EXTI->PR |= 1<<0;
	//call IRQ_CALL
	GP_IRQ_CallBack[0]();
}

void EXTI1_IRQHandler (void)
{
	EXTI->PR |= 1<<1;
	GP_IRQ_CallBack[1]();
}
void EXTI2_IRQHandler (void)
{
	EXTI->PR |= 1<<1;
	GP_IRQ_CallBack[1]();
}
void EXTI3_IRQHandler (void)
{

}
void EXTI4_IRQHandler (void)
{

}
void EXTI9_5_IRQHandler (void)
{

}
void EXTI15_10_IRQHandler (void)
{

}
