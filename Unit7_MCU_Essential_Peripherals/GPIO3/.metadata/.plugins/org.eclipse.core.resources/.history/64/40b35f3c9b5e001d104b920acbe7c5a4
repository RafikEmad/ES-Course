/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "stm32f103x6.h"
#include "stm32_F103C6_gpio_driver.h"
#include "stm32_F103C6_EXTI_driver.h"
#include "lcd.h"
#include "keypad.h"



#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

unsigned int IRQ_Flag=0;

/*void clock_init()
{
	//enable clock gpioA
	RCC_GPIOA_CLK_EN();
	//enable clock gpioB
	RCC_GPIOB_CLK_EN();
}*/

/*
void GPIO_init()
{
	GPIO_PinConfig_t PinCfg;

	//PA1 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCfg);


	//PB1 output push pull mode
	//01: output mode, max speed 10MHz
	//CNF 00: general purpose output push-pull
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);


	//PA13 input HighZ Floating input (reset state)
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
	MCAL_GPIO_Init(GPIOA, &PinCfg);

	//PB13 output push pull mode
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	PinCfg.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
	MCAL_GPIO_Init(GPIOB, &PinCfg);
}
*/

void wait_ms(int x){
	int i,j;
	for(i=0;i<x;i++)
		for(j=0;j<255;j++);
}
void EXTI9_Callback(void)
{

}

int main(void)
{
	//============================================================
	//unit7-lesson3
	/*clock_init();
	GPIO_init();

	while(1)
	{
		//PA1 >> connected with external Pull UP resistance
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) ==0 )//single press
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
			while( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) ==0);
		}
		//PA13 >> connected with external Pull DOWN resistance
		if( MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == 1 )//Multi press
		{
			MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		}
		wait_ms(1);
	}*/
	//===============================================================
	//unit7-lesson4
	//enable clock
	RCC_GPIOA_CLK_EN();
	RCC_GPIOB_CLK_EN();
	AFIO_CLK_EN();

	LCD_INIT();
	LCD_clear_screen();

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
	EXTI_CFG.Trigger_case = EXTI_Trigger_RISING;
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
	IRQ_Flag = 1;
	while(1)
	{
		if (IRQ_Flag)
		{
			LCD_clear_screen();
		}

		wait_ms(1000);
	}


}
